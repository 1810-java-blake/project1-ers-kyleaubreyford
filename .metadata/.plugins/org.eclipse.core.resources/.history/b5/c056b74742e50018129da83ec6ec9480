package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.models.Reimbursement;
import com.revature.utils.ConnectionUtil;

public class ReimbursementJdbc implements ReimbursementDao {

	
	private Reimbursement extractFromResultSet(ResultSet rs) throws SQLException {
		return new Reimbursement(rs.getInt("id"),rs.getInt("amount"), rs.getTimestamp("submitted"),
				rs.getTimestamp("resolved"), rs.getString("description"),rs.getString("receipt"),
				rs.getInt("author"),rs.getInt("resolver"),rs.getInt("statusid"),rs.getInt("typeid"));
	}
	
	
	@Override
	public List<Reimbursement> findByUserId(int id) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM reimbursement WHERE author = ?");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			List<Reimbursement> reimbursements = new ArrayList<>();
			while (rs.next()) {
				reimbursements.add(extractFromResultSet(rs));
			}
			return reimbursements;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public boolean saveReimbursement(Reimbursement r) {
		try (Connection conn = ConnectionUtil.getConnection()) {

			Statement s = conn.createStatement();
			s.execute("Select MAX(id) FROM reimbursement");
			ResultSet rsId = s.getResultSet(); //

			if (rsId.next()) {
				r.setId(rsId.getInt(1) + 1);
			}

			PreparedStatement ps = conn.prepareStatement(
					"INSERT INTO reimbursement("
					+ "id,amount,submitted,"
					+ "resolved,description,"
					+ "receipt,author,"
					+ "resolver,statusid"
					+ "typeid) VAlUES (?,?,?,?,?,?,?,?,?,?);");
			
			
			ps.setInt(1, r.getId());
			ps.setInt(2, r.getAmount());
			ps.setTimestamp(3, r.getSubmitted());
			ps.setTimestamp(4, r.getResolved());
			ps.setString(5, r.getDescription());
			ps.setString(6, r.getReceipt());
			ps.setString(7, r.getAuthor());
			ps.setString(8, r.getResolver());
			ps.setString(9, r.getStatusId());
			ps.setString(10, r.getTypeId());
			ps.executeUpdate();
			return true;

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public List<Reimbursement> findAll() {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM reimbursement");
			ResultSet rs = ps.executeQuery();
			List<Reimbursement> reimbursements = new ArrayList<>();
			while (rs.next()) {
				reimbursements.add(extractFromResultSet(rs));
			}
			return reimbursements;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<Reimbursement> findByStatusType(int status) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM reimbursement WHERE statusid = ?");
			ps.setInt(1, status);
			ResultSet rs = ps.executeQuery();
			List<Reimbursement> reimbursements = new ArrayList<>();
			while (rs.next()) {
				reimbursements.add(extractFromResultSet(rs));
			}
			return reimbursements;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public boolean updateStatus(int id) {
		// TODO Auto-generated method stub
		return false;
	}

}
